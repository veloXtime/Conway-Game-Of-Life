let Game = function (targetElement, height, width) {
    this.canvas = document.getElementById(targetElement);
    this.canvas.width = width;
    this.canvas.height = height;
    this.canvas.style = 'border:solid 2px SteelBlue;';
    this.context = this.canvas.getContext('2d');

    this.sideLength = 10;

    this.rows = height / this.sideLength;
    this.cols = width / this.sideLength;

    this.grid = new Grid(this.rows, this.cols);
    this.grid.setLiving(1,1);
    this.grid.setLiving(1,2);
    this.grid.setLiving(1,3);

    let clickEvent = function(event) {
        let x = event.pageX - this.canvas.offsetLeft;
        let y = event.pageY - this.canvas.offsetTop;
            
        let i = Math.floor(x / this.sideLength);
        let j = Math.floor(y / this.sideLength);
            
        this.grid.setLiving(i, j); 
    }
};

Game.prototype.clickEvent = function(event) {
    let x = event.pageX - this.canvas.offsetLeft;
    let y = event.pageY - this.canvas.offsetTop;
        
    let i = Math.floor(x / this.sideLength);
    let j = Math.floor(y / this.sideLength);
        
    this.grid.setLiving(i, j);
}

Game.prototype.hello = function() {
    this.mouseDown = false;

    this.startSim = false;

    window.onkeydown = function (event) {
        this.startSim = !this.startSim;
    }
    
    let thiscanvas = this.canvas;
    let sl = this.sideLength;
    let thisgrid = this.grid;
    let te = this.clickEvent; 

    this.canvas.addEventListener('mousedown', function (event) {
        this.mouseDown = true;
        if (typeof(this) == "undefined") console.log("undefined error");
        thisgrid.setLiving()
        let x = event.pageX - thiscanvas.offsetLeft;
        let y = event.pageY - thiscanvas.offsetTop;
            
        let i = Math.floor(x / sl);
        let j = Math.floor(y / sl);
        thisgrid.setLiving(i, j);
    })

    this.canvas.addEventListener('mouseup', function(event) {
        this.mouseDown = false;
        this.canvas.removeEventListener('mousemove', te);
    })
}





Game.prototype.update = function() {
    this.grid.updateStatus();
}


Game.prototype.displayOut = function(){
    this.context.fillStyle = 'white';
    this.context.fillRect(0,0,this.canvas.width, this.canvas.height);
    let sl = this.sideLength;

    this.context.fillStyle = 'SteelBlue';
    for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
            if (this.grid.getIsAlive(i, j)) {
                this.context.fillRect(j * sl, i * sl, sl, sl);
            }
        }
    }

    this.context.strokeStyle = "SteelBlue";
    for (let i = this.sideLength; i < this.canvas.width; i+= this.sideLength) {
        this.context.beginPath();
        this.context.moveTo(i, 0);
        this.context.lineTo(i, this.canvas.height);
        this.context.stroke(); 
    }
    for (let i = this.sideLength; i < this.canvas.height; i+= this.sideLength) {
        this.context.beginPath();
        this.context.moveTo(0, i);
        this.context.lineTo(this.canvas.width, i);
        this.context.stroke(); 
    }
};


let g = new Game("thiscanvas", 300, 500);
g.hello();
g.displayOut();

if (g.startSim) {
    setInterval(function() {
    g.update();
    g.displayOut();
}, 50);
}


